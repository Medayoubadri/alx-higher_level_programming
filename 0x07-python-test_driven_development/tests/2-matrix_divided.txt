==============================
How to Use 2-matrix_divided.py
==============================

This module defines a function `matrix_divided(matrix, div)` that divides all elements of a matrix by a number `div`.

Usage
=====

`matrix_divided(...)` returns a new matrix where all values have been divided by `div`. 

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

::

    >>> matrix_divided([[10, 20]], 10)
    [[1.0, 2.0]]

Matrix Input Validation
=======================

`matrix_divided()` expects a matrix of lists with numbers. If the input is not a list of lists of integers or floats, a TypeError is raised:

::

    >>> matrix_divided([1, 2], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix_divided([[1, "2"]], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Empty or Non-Uniform Matrices
=============================

An empty matrix or one where rows differ in size will raise a ValueError:

::

    >>> matrix_divided([], 2)
    Traceback (most recent call last):
    ValueError: matrix can't be empty

::

    >>> matrix_divided([[1, 2], [3]], 2)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Divisor Validation
==================

If the divisor is not an integer or float, or if it is zero, a TypeError or ZeroDivisionError is raised:

::

    >>> matrix_divided([[1, 2], [3, 4]], "10")
    Traceback (most recent call last):
    TypeError: div must be a number

::

    >>> matrix_divided([[1, 2], [3, 4]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

Precision and Float Handling
============================

The division is done and rounded to 2 decimal places:

::

    >>> matrix_divided([[1, 2.5], [3.75, 4]], 2)
    [[0.5, 1.25], [1.88, 2.0]]

Handling Extreme Values
=======================

::

    >>> matrix_divided([[1000000, 5000000], [999999, 1]], 1000000)
    [[1.0, 5.0], [1.0, 0.0]]

::

    >>> matrix_divided([[float('inf'), 1]], 2)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> matrix_divided([[float('nan')]], 2)
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
